Cell - Класс игровой ячейки, содержит
	- значение сохраненое в ячейки, 0 - пусто, 1 - крестик, 2 - нолик.
	- метод установки значения в игровой ячейки.

Coord - класс, сохраняющий в себе координату ячейки, содержит:
	- поля x, y - кординаты ячейки на поле.

PlayingField - класс игрового поля, содержит:
	       поле field - в виде двумерного массива класса Cell.
	       методы initField() - инициализация игрового поля 

io ----------------------------------------------------------------------		
Input - интерфейс с Методами для работы с пользователем, получения его хода.
ConsoleInput - класс консольного ввода содержит:
	       поле с типом Scanner;	 	
ValidateInput -  Класс выполняет проверку ввода данных пользователем. По анлогии с trackingsystem.

Output - Систем вывода информации о сделаных ходах на игровом поле
ConsoleOutput - класс осуществляет вывод хода на игровом поле на консоль.
--------------------------------------------------------------------------
----------------------------------------------------------------------------
Logic - все действия игры, анализ игровых ситуаций, класс содержит
   поля:
	win = -1; - Признак победителя;
        flagGame = 1; - Признак того, что игра идет. Если = 0, то новые ходы делать нельзя.
    	int r1 = 0; - Ваш счет.
    	int r2 = 0; - Счет компьютера.
	PlayingField field - игровое поле.
	int[][] ves - Весовая матрица для различных вариантов ходов.
	int[][][] hod - Все возможные сочетания линий на игровом поле.
   методы:
	gameAnaliz(int v) - Метод анализирует игрового поле после каждого хода,
			    посрдестволм анализа игровых ситуаций.
			    Если > 0, значит кто-то выиграл или ничья.
			    Если игра может быть продолжена ищем куда
			    походил человек и запускаем метод analiz().
			    Если какая-то ситуация выигрышная, то рисуем эти ячейки закрашенными
	analize() - Анализируем результат хода. Возвращает номер победителя или играем дальше (возвратит 0).
		    Ищем ход для нолика, который приведет к победе.
		    Ищем клетку, которая приведет к победе крестик.
		    Если нет очивидных ходов анализируем по весу ячейки.
		    Если ни одна ситуация выше на сработала - значит у нас ничья.
	calcVes() - Расчет хода на основе весовых коэфицентов.
		    Метод возвращает кординату куда нужно походить
		    Проходим по всем ячейкам, если находим пустую, то анализируем ее вес по таблице
	 	    Возвращаем найденную ячейку с минимальным весом.

	seachHod(int element) - Поиск хода, который приведет к выиграшу для игрока с номером element.
				Возвращает кординату ячейки, куда нужно походить.
	     Примерная логика:	В методе проходим по всем выиграшным ситуациям
				внутри выиграшной ситауции проходим по всем ячейкам
				Получаем координаты ячейки из массива ходов	
				Если в ячейке находиться искомый элемент, то увеличиваем счетчик ходов
				Если пусто, то запоминаем кординату этой ячейки.
				Если мы нашли, что в строке 2-а элемента совподают и есть пустая ячейка
				возвращаем координату пустой ячейки.
	int seachWin() - Поиск победителя. Ищем среди вариантов выиграшных ситуаций.
			 Возвращаем номер победителя.

---------------------------------------------------------------------------------
Player -  Класс Player - выполняет ход. Содержит счетчик побед. и метод step().

---------------------------------------------------------------------------------
Strat - Класс запуска игры, содержит поля вывода информации на консоль, игрового поля, игрока, логики



